#lang racket

(require ffi/unsafe) ; 确保导入 future 模块
(provide (all-defined-out))

;; ==================== 堆栈跟踪支持 ====================
(define call-stack (make-parameter '()))

(define (push-call-frame expr)
  (call-stack (cons expr (call-stack))))

(define (pop-call-frame)
  (call-stack (cdr (call-stack))))

(define (get-stack-trace)
  (reverse (call-stack)))

;; ==================== 基础结构定义 ====================
(struct class (name super fields methods static-fields static-methods) 
  #:mutable #:transparent)

(struct object (class fields ref-count) #:mutable #:transparent)
(struct method (params body is-private) #:transparent)
(struct interface (name methods) #:transparent)
(struct exception (message) #:transparent) ; 简化的异常结构体

;; ==================== 全局环境 ====================
(define class-env (make-hash))
(define interface-env (make-hash))
(define exception-handlers (make-parameter null))
(define event-loop (make-parameter #f))

;; ==================== 辅助函数 ====================
(define (make-private-key name)
  (string->symbol (format "private:~a" name)))

(define (is-private-field? name)
  (and (symbol? name) (regexp-match? #rx"^private:" (symbol->string name))))

(define (operator-method-name op)
  (case op
    [(+) "__add__"]
    [(-) "__sub__"]
    [(*) "__mul__"]
    [(/) "__div__"]
    [(=) "__eq__"]
    [(<) "__lt__"]
    [(>) "__gt__"]
    [else #f]))

;; ==================== 类与对象操作 ====================
(define (lookup-class name)
  (hash-ref class-env name #f))

(define (register-class! name cls)
  (hash-set! class-env name cls))

(define (check-field-access obj field env)
  (define private-key (make-private-key field))
  (define fields (object-fields obj))
  
  (cond
    [(and (hash-has-key? fields private-key)
          (not (assoc 'this env)))
     (error (format "Cannot access private field: ~a" field))]
    [else #t]))

(define (instantiate cls args env)
  (define fields (make-hash))
  (define parent (class-super cls))
  
  ;; 继承父类字段
  (when parent
    (let ([parent-obj (instantiate parent args env)])
      (for ([(k v) (in-hash (object-fields parent-obj))])
        (hash-set! fields k v))))
  
  ;; 初始化当前类字段
  (for ([(k v) (in-hash (class-fields cls))])
    (hash-set! fields k v))
  
  (define obj (object cls fields 1)) ; 引用计数初始化为1
  
  ;; 调用构造函数
  (define constr (hash-ref (class-methods cls) 'constructor #f))
  (when constr
    (let ([this-env (list (cons 'this obj))])
      (apply-method constr obj this-env args env)))
  
  ;; 注册析构函数
  (when (hash-has-key? (class-methods cls) '__del__)
    (register-finalizer obj (lambda (o) (dispatch-method o '__del__ '() '()))))
  
  obj)

(define (find-method cls name)
  (let loop ([current cls])
    (cond
      [(not current) #f]
      [(hash-ref (class-methods current) name #f) => values]
      [else (loop (class-super current))])))

;; ==================== 方法调用 ====================
(define (dispatch-method obj method-name args env)
  (define cls (object-class obj))
  (define m (find-method cls method-name))
  
  (unless m
    (error (format "Method not found: ~a in class ~a" method-name (class-name cls))))
  
  (when (and (method-is-private m) (not (assoc 'this env)))
    (error (format "Cannot call private method: ~a" method-name)))
  
  (define this-env (list (cons 'this obj)))
  (apply-method m obj this-env args env))

(define (apply-method m obj this-env args caller-env)
  (define param-names (method-params m))
  (unless (= (length param-names) (length args))
    (error "Argument count mismatch"))
  
  ;; 创建参数绑定
  (define arg-env
    (for/list ([name param-names] [arg args])
      (cons name arg)))
  
  ;; 组合环境
  (eval-expr (append this-env arg-env caller-env) (method-body m)))

;; ==================== 字段操作 ====================
(define (access-field obj field env)
  (check-field-access obj field env)
  (define fields (object-fields obj))
  (define private-key (make-private-key field))
  
  (cond
    [(hash-ref fields field #f) => values]
    [(hash-ref fields private-key #f) => values]
    [else (error (format "Field not found: ~a" field))]))

(define (set-field! obj field value env)
  (check-field-access obj field env)
  (define fields (object-fields obj))
  (define private-key (make-private-key field))
  
  (cond
    [(hash-has-key? fields field)
     (hash-set! fields field value)]
    [(hash-has-key? fields private-key)
     (hash-set! fields private-key value)]
    [else (error (format "Field not found: ~a" field))]))

;; ==================== 引用计数和析构 ====================
(define (retain obj)
  (set-object-ref-count! obj (+ (object-ref-count obj) 1)))

(define (release obj)
  (set-object-ref-count! obj (- (object-ref-count obj) 1))
  (when (<= (object-ref-count obj) 0)
    (finalize-object obj)))

(define (finalize-object obj)
  (when (hash-has-key? (class-methods (object-class obj)) '__del__)
    (dispatch-method obj '__del__ '() '())))

;; ==================== 异常处理 ====================
(define (raise msg)
  (let ([handler (and (pair? (exception-handlers)) (car (exception-handlers)))])
    (if handler
        (handler (exception msg)) 
        (error msg))))

;; ==================== 表达式求值 ====================
(define (make-base-environment)
  (list
   (cons 'true #t)
   (cons 'false #f)
   (cons 'null null)
   (cons 'print (lambda (v) (display v) v))
   (cons 'println (lambda (v) (displayln v) v))
   (cons 'string-append string-append)
   (cons 'number->string number->string)
   (cons '+ +)
   (cons '- -)
   (cons '* *)
   (cons '/ /)
   (cons '>= >=)
   (cons '= =)
   (cons '< <)
   (cons '> >)
   (cons 'raise raise)))

(define (lookup-var env var)
  (let ([pair (assoc var env)])
    (if pair
        (cdr pair)
        (error (format "Undefined variable: ~a" var)))))

(define (eval-expr env expr)
  (parameterize ([call-stack (cons expr (call-stack))])
    (match expr
      ;; 类定义
      (`(class ,name ,super-part ,body ...)
       (let* ([super-obj (match super-part
                           [`(extends ,super-name) (lookup-class super-name)]
                           ['() #f]
                           [_ (error "Invalid superclass specification:" super-part)])]
              [fields (make-hash)]
              [methods (make-hash)]
              [static-fields (make-hash)]
              [static-methods (make-hash)])
   
         (for ([expr body])
           (match expr
             ;; 字段定义
             [`(field ,field-name ,init-expr)
              (hash-set! fields field-name (eval-expr env init-expr))]
       
             [`(private ,field-name ,init-expr)
              (let ([private-key (make-private-key field-name)])
                (hash-set! fields private-key (eval-expr env init-expr)))]
       
             ;; 静态字段
             [`(static-field ,field-name ,init-expr)
              (hash-set! static-fields field-name (eval-expr env init-expr))]
       
             [`(static-private ,field-name ,init-expr)
              (let ([private-key (make-private-key field-name)])
                (hash-set! static-fields private-key (eval-expr env init-expr)))]
       
             ;; 方法定义
             [`(method ,method-name ,params ,body-expr)
              (hash-set! methods method-name (method params body-expr #f))]
       
             [`(private-method ,method-name ,params ,body-expr)
              (hash-set! methods method-name (method params body-expr #t))]
       
             ;; 静态方法
             [`(static-method ,method-name ,params ,body-expr)
              (hash-set! static-methods method-name (method params body-expr #f))]
       
             [`(static-private-method ,method-name ,params ,body-expr)
              (hash-set! static-methods method-name (method params body-expr #t))]
       
             ;; 构造函数
             [`(constructor ,params . ,body-exprs)
              (hash-set! methods 'constructor 
                         (method params `(begin ,@body-exprs) #f))]
       
             ;; 析构函数
             [`(destructor . ,body-exprs)
              (hash-set! methods '__del__ 
                         (method '() `(begin ,@body-exprs) #f))]
       
             ;; 无效的类体元素
             [_ (error "Invalid class body element:" expr)]))
   
         (define new-class 
           (class name super-obj fields methods static-fields static-methods))
         (register-class! name new-class)
         new-class))
    
      ;; 接口定义
      [`(interface ,name ,methods ...)
       (let* ([method-table (make-hash)]
              [_ (for ([m methods])
                   (match m
                     [`(,method-name ,params) 
                      (hash-set! method-table method-name params)]
                     [_ (error "Invalid interface method definition")]))]
              [new-interface (interface name method-table)])
         (hash-set! interface-env name new-interface)
         new-interface)]
    
      ;; 对象实例化
      [`(new ,class-name ,args ...)
       (define cls (lookup-class class-name))
       (unless cls (error "Class not defined:" class-name))
       (define arg-values (map (curry eval-expr env) args))
       (instantiate cls arg-values env)]
      
    
      ;; 方法调用
      [`(send ,obj-expr ,method-name ,args ...)
       (define obj (eval-expr env obj-expr))
       (define arg-values (map (curry eval-expr env) args))
       (dispatch-method obj method-name arg-values env)]
    
      ;; 静态方法调用
      [`(static-call ,class-name ,method-name ,args ...)
       (define cls (lookup-class class-name))
       (unless cls (error "Class not defined:" class-name))
       (define m (hash-ref (class-static-methods cls) method-name #f))
       (unless m (error "Static method not found:" method-name))
       (define arg-values (map (curry eval-expr env) args))
       (apply-method m #f '() arg-values env)]
    
      ;; 字段访问
      [`(get ,obj-expr ,field)
       (define obj (eval-expr env obj-expr))
       (access-field obj field env)]
    
      ;; 静态字段访问
      [`(static-get ,class-name ,field)
       (define cls (lookup-class class-name))
       (unless cls (error "Class not defined:" class-name))
       (hash-ref (class-static-fields cls) field)]
    
      ;; 字段设置
      [`(set ,obj-expr ,field ,value-expr)
       (define obj (eval-expr env obj-expr))
       (define value (eval-expr env value-expr))
       (set-field! obj field value env)]
    
      ;; 静态字段设置
      [`(static-set ,class-name ,field ,value-expr)
       (define cls (lookup-class class-name))
       (unless cls (error "Class not defined:" class-name))
       (define value (eval-expr env value-expr))
       (hash-set! (class-static-fields cls) field value)]
    
      ;; try/catch异常处理
      [`(try ,body-expr (catch ,e ,handler-expr))
       (let ([old-handlers (exception-handlers)])
         (parameterize ([exception-handlers (cons (lambda (ex) 
                                                   (eval-expr 
                                                    (cons (cons e ex) env) 
                                                    handler-expr))
                                                 old-handlers)])
           (eval-expr env body-expr)))]
    
      ;; 运算符重载
      [`(,op ,left ,right) 
       (let* ([operator (operator-method-name op)]
              [l-val (eval-expr env left)]
              [r-val (eval-expr env right)])
         (if (and operator (object? l-val))
             (if (find-method (object-class l-val) operator)
                 (dispatch-method l-val operator (list r-val) env)
                 (apply (lookup-var env op) (list l-val r-val)))
             (apply (lookup-var env op) (list l-val r-val))))]
    
      ;; 变量定义
      [`(define ,var ,value)
       (let ([val (eval-expr env value)])
         (cons (cons var val) env))]
    
      ;; 变量引用
      [(? symbol? var) (lookup-var env var)]
    
      ;; 字面量
      [(? number? n) n]
      [(? string? s) s]
      [(? boolean? b) b]
    
      ;; if条件
      [`(if ,cond ,then ,else)
       (if (eval-expr env cond)
           (eval-expr env then)
           (eval-expr env else))]
    
      ;; 块表达式
      [`(begin ,exprs ...)
       (for/fold ([current-env env] [result (void)] #:result result)
                 ([e exprs])
         (let ([res (eval-expr current-env e)])
           (values (if (and (list? res) (eq? (car (car exprs)) 'define))
                      res
                      current-env)
                   res)))]
    
      ;; 函数应用
      [`(,func . ,args)
       (define f (eval-expr env func))
       (if (procedure? f)
           (apply f (map (curry eval-expr env) args))
           (error (format "Not a procedure: ~a" f)))]
    
      ;; 直接值
      [v v]
      )))

;; ==================== 程序执行 ====================
(define (eval-program exprs)
  (let loop ([env (make-base-environment)] [exprs exprs])
    (if (null? exprs)
        (void)
        (let* ([result (eval-expr env (car exprs))]
               [new-env (if (and (list? result) (eq? (car (car exprs)) 'define)) 
                           result 
                           env)])
          (loop new-env (cdr exprs))))))

;; ==================== 调试支持 ====================
(define breakpoints (mutable-set))
(define debug-mode? (make-parameter #f))

(define (set-breakpoint expr)
  (set-add! breakpoints expr))

(define (debug-shell expr env)
  (display "Debug> ")
  (flush-output)
  (let ([cmd (read)])
    (match cmd
      ['step (eval-expr env expr)]
      ['continue (debug-mode? #f) (eval-expr env expr)]
      ['env (println env)]
      ['locals (println (filter (lambda (p) (not (is-private-field? (car p)))) env))]
      ['breakpoints (println breakpoints)]
      [else (displayln "Available commands: step, continue, env, locals, breakpoints")])))